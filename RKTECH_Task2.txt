// Snake Game... 

Main Code:

import javax.swing.JFrame;
import java.awt.Dimension;
public class Main {

	public static void main(String[] args) {
		JFrame frame = new JFrame("Snake Game");
		frame.setContentPane(new GameSnake());
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setResizable(false);
		frame.pack();
		frame.setPreferredSize(new Dimension(GameSnake.WIDTH,GameSnake.HEIGHT));
		frame.setLocationRelativeTo(null);
		frame.setVisible(true);
	}

}




Game Panel Code:

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

import javax.swing.JPanel;

import java.awt.Color;
import java.awt.Dimension;

public class GameSnake extends JPanel implements Runnable, KeyListener {
	
	public static final int WIDTH=500;
	public static final int HEIGHT=500;
	
	
	private Graphics2D g2d;
	private BufferedImage image;
	
	//Game Loop
	private Thread thread;
	private boolean running;
	private long targetTime;
	
	private final int SIZE = 10;
	private Object head, ball;
	private ArrayList<Object> snake;
	private int score;
	private int level;
	private boolean gameover;
	
	// Game Movement
	private int dx,dy;
	
	private boolean up,down,right,left,start;
	
	public GameSnake() {
		setPreferredSize(new Dimension(WIDTH, HEIGHT));
		setFocusable(true);
		requestFocus();
		addKeyListener(this);
	}
	
	public void addNotify() {
		super.addNotify();
		thread = new Thread(this);
		thread.start();
		
	}
	private void setFPS(int fps) {
		targetTime = 1000/fps;
	}

	@Override
	public void keyTyped(KeyEvent e) {
		
	}

	@Override
	public void keyPressed(KeyEvent o) {
		int k = o.getKeyCode();
		
		if(k == KeyEvent.VK_UP) up = true;
		if(k == KeyEvent.VK_DOWN) down = true;
		if(k == KeyEvent.VK_LEFT) left = true;
		if(k == KeyEvent.VK_RIGHT) right = true;
		if(k == KeyEvent.VK_ENTER) start = true;

	}

	@Override
	public void keyReleased(KeyEvent o) {
		int k = o.getKeyCode();
		if(k == KeyEvent.VK_UP) up = false;
		if(k == KeyEvent.VK_DOWN) down = false;
		if(k == KeyEvent.VK_LEFT) left = false;
		if(k == KeyEvent.VK_RIGHT) right = false;
		if(k == KeyEvent.VK_ENTER) start = false;

	}

	@Override
	public void run() {
		if(running) return;
		init();
		long startTime;
		long elapsed;
		long wait;
		while(running) {
			startTime = System.nanoTime();
			
			update();
			requestRender();
			elapsed = System.nanoTime() - startTime;
			wait = targetTime - elapsed / 1000000;
			if(wait>0) {
				try {
					Thread.sleep(wait);
				}catch(Exception e) {
					e.printStackTrace();
				}
			}
		}

	}
	
	private void init() {
		image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_ARGB);
		g2d = image.createGraphics();
		running=true;
		setUplevel();
		
	}
	private void setUplevel() {
		snake = new ArrayList<Object>();
		head = new Object(SIZE);
		head.setPosition(WIDTH / 2, HEIGHT / 2);
		snake.add(head);
		
		for(int i=1;i<3;i++) {
			Object o = new Object(SIZE);
			head.setPosition(head.getM() + (i * SIZE), head.getN());
			snake.add(o);
		}
		ball = new Object(SIZE);
		setBall();
		score = 0;
		gameover = false;
		level = 1;
		dx = dy = 0;
		setFPS(level * 10);
	}
	public void setBall() {
		int m = (int)(Math.random() * (WIDTH - SIZE));
		int n = (int)(Math.random() * (HEIGHT - SIZE));
		m = m - (m % SIZE);
		n = n - (n % SIZE);
		
		
		ball.setPosition(m, n);
	}
    private void requestRender() {
		render(g2d);
		Graphics g= getGraphics();
		g.drawImage(image, 0, 0, null);
		g.dispose();
	}
	private void update() {
		if(gameover) {
			if(start) {
				setUplevel();
			}
			return ;
		}
		if(up && dy == 0) {
			dy = -SIZE;
			dx = 0;
		}
		if(down && dy == 0) {
			dy = SIZE;
			dx = 0;
		}
		if(left && dx == 0) {
			dy = 0;
			dx = -SIZE;
		}
		if(right && dx == 0 && dy != 0) {
			dy = 0;
			dx = SIZE;
		}
		
		if(dx != 0 || dy != 0) {
			for( int i= snake.size() - 1;i > 0;i--) {
			snake.get(i).setPosition(
					snake.get(i-1).getM(),
			        snake.get(i-1).getN()
			        );
		}
		head.move(dx, dy);
		}
		
		for(Object o : snake) {
			if(o.isCollsion(head)) {
				gameover = true;
				break;
			}
		}
		
		if(ball.isCollsion(head)) {
			score++;
			setBall();
			
			Object o = new Object(SIZE);
			o.setPosition(-100,-100);
			snake.add(o);
			if(score % 10 == 0) {
				level++;
				if(level > 10) level = 10;
				setFPS(level * 10);
			}
		}
		
		
		if(head.getM() < 0) head.setM(WIDTH);
		if(head.getN() < 0) head.setN(HEIGHT);
		if(head.getM() > WIDTH) head.setM(0);
		if(head.getN() > HEIGHT) head.setN(0);
	}
	public void render(Graphics2D g2d) {
		g2d.clearRect(0, 0, WIDTH, HEIGHT);
		
		g2d.setColor(Color.BLUE);
		for(Object o : snake) {
			o.render(g2d);
		}
		
		g2d.setColor(Color.YELLOW);
		ball.render(g2d);
		
		if(gameover) {
			g2d.drawString("GameOver!", 150, 200);
		}
		
		
		g2d.setColor(Color.WHITE);
		g2d.drawString("Score : " + score + "Level : " + level, 10, 10);
		if(dx == 0 && dy == 0) {
			g2d.drawString("Ready!", 150, 200);
		}
		
	}

}



Object Code:

import java.awt.Graphics2D;
import java.awt.Rectangle;

public class Object {
	private int m,n,size;
	public Object(int size) {
		this.size = size;
	}
	
	public int getM() {
		return m;
		}
	public int getN() { 
		return n;
		}
	public void setM(int m) {
		this.m = m;
		}
	public void setN(int n) {
		this.n = n;
		}
	
	public void setPosition(int m,int n) {
		this.m = m;
		this.n = n;
	}
	
	public void move(int dx,int dy) {
		m += dx;
		n += dy;
	}
	public Rectangle getBound() {
		return new Rectangle(m, n, size, size);
	}
	public boolean isCollsion(Object o) {
		if(o == this) return false;
		return getBound().intersects(o.getBound());
	}
	public void render(Graphics2D g2d) {
		g2d.fillRect(m + 1, n + 1, size - 1, size - 1);
		
	}

}


.....Thank you.....


